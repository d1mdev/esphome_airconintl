#include "esphome.h"
#include "esphome/components/sensor/sensor.h"

#pragma pack(1)
typedef struct _Device_Status
{
    uint8_t header[16];

    uint8_t wind_status; // air volume
    uint8_t sleep_status;

    uint8_t direction_status : 2; // wind direction
    uint8_t run_status : 2;
    uint8_t mode_status : 4;

    // 4
    uint8_t indoor_temperature_setting;
    uint8_t indoor_temperature_status;
    uint8_t indoor_pipe_temperature;
    // 7
    uint8_t indoor_humidity_setting;
    uint8_t indoor_humidity_status;

    uint8_t somatosensory_temperature; // sensible temperature
    // 10
    uint8_t somatosensory_compensation_ctrl : 3;
    uint8_t somatosensory_compensation : 5;
    // 11
    uint8_t temperature_Fahrenheit : 3; // fahrenheit display

    uint8_t temperature_compensation : 5;

    // 12
    uint8_t timer;

    // 13
    uint8_t hour;
    // 14
    uint8_t minute;
    // 15
    uint8_t poweron_hour;
    // 16
    uint8_t poweron_minute;
    // 17
    uint8_t poweroff_hour;
    // 18
    uint8_t poweroff_minute;
    // 19
    uint8_t wind_door : 4;
    uint8_t drying : 4;
    // 20
    uint8_t dual_frequency : 1;
    uint8_t efficient : 1;
    uint8_t low_electricity : 1; // save electricity
    uint8_t low_power : 1;       // energy saving
    uint8_t heat : 1;            // heating air
    uint8_t nature : 1;          // natural wind
    uint8_t left_right : 1;      // horizontal swing
    uint8_t up_down : 1;         // vertical swing

    // 21
    uint8_t smoke : 1; // smoke removal
    uint8_t voice : 1;
    uint8_t mute : 1;
    uint8_t smart_eye : 1;
    uint8_t outdoor_clear : 1; // outdoor cleaning
    uint8_t indoor_clear : 1;  // indoor cleaning
    uint8_t swap : 1;          // Change the wind
    uint8_t dew : 1;           // fresh

    // 22
    uint8_t indoor_electric : 1;
    uint8_t right_wind : 1;
    uint8_t left_wind : 1;
    uint8_t filter_reset : 1;
    uint8_t indoor_led : 1;
    uint8_t indicate_led : 1;
    uint8_t display_led : 1;
    uint8_t back_led : 1;

    // 23
    uint8_t indoor_eeprom : 1; // eeprom
    uint8_t sample : 1;
    uint8_t rev23 : 4;
    uint8_t time_lapse : 1;
    uint8_t auto_check : 1; // self-test

    // 24
    uint8_t indoor_outdoor_communication : 1;
    uint8_t indoor_zero_voltage : 1;
    uint8_t indoor_bars : 1;
    uint8_t indoor_machine_run : 1;
    uint8_t indoor_water_pump : 1;
    uint8_t indoor_humidity_sensor : 1;
    uint8_t indoor_temperature_pipe_sensor : 1;
    uint8_t indoor_temperature_sensor : 1;

    // 25
    uint8_t rev25 : 3;
    uint8_t eeprom_communication : 1;
    uint8_t electric_communication : 1;
    uint8_t keypad_communication : 1;
    uint8_t display_communication : 1;

    // 26
    uint8_t compressor_frequency;
    // 27
    uint8_t compressor_frequency_setting;
    // 28
    uint8_t compressor_frequency_send;
    // 29
    uint8_t outdoor_temperature;
    // 30
    uint8_t outdoor_condenser_temperature;
    // 31
    uint8_t compressor_exhaust_temperature;
    // 32
    uint8_t target_exhaust_temperature;
    // 33
    uint8_t expand_threshold;
    // 34
    uint8_t UAB_HIGH;
    // 35
    uint8_t UAB_LOW;
    // 36
    uint8_t UBC_HIGH;
    // 37
    uint8_t UBC_LOW;
    // 38
    uint8_t UCA_HIGH;
    // 39
    uint8_t UCA_LOW;
    // 40
    uint8_t IAB;
    // 41
    uint8_t IBC;
    // 42
    uint8_t ICA;
    // 43
    uint8_t generatrix_voltage_high;
    // 44
    uint8_t generatrix_voltage_low;
    // 45
    uint8_t IUV;
    // 46
    uint8_t wind_machine : 3;
    uint8_t outdoor_machine : 1;
    uint8_t four_way : 1;
    uint8_t rev46 : 3;

    // 47
    uint8_t rev47;
    // 48
    uint8_t rev48;
    // 49
    uint8_t rev49;
    // 50
    uint8_t rev50;
    // 51
    uint8_t rev51;
    // 52
    uint8_t rev52;
    // 53
    uint8_t rev53;
    // 54
    uint8_t rev54;
    // 55
    uint8_t rev55;
    // 56
    uint8_t rev56;

    uint8_t extra[6];
    uint16_t chk_sum;
    uint8_t foooter[2];
} Device_Status;

uint8_t on[] = {
    0xF4, 0xF5, 0x00, 0x40, 0x29, 0x00, 0x00, 0x01, 0x01, 0xFE, 0x01,
    0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00,
    0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x01, 0xDF, 0xF4, 0xFB};

uint8_t off[] = {
    0xF4, 0xF5, 0x00, 0x40, 0x29, 0x00, 0x00, 0x01, 0x01, 0xFE, 0x01,
    0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x01, 0x04, 0x00, 0x00, 0x00,
    0x00, 0x04, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x01,
    0x55, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x02, 0x31, 0xF4, 0xFB};

uint8_t mode_cool[] = {
    0xF4, 0xF5, 0x00, 0x40, 0x29, 0x00, 0x00, 0x01, 0x01, 0xFE, 0x01,
    0x00, 0x00, 0x65, 0x00, 0x00, 0x01, 0x01, 0x50, 0x35, 0x00, 0x00,
    0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x01,
    0x04, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x02, 0x7F, 0xF4, 0xFB};

uint8_t mode_heat[] = {
    0xF4, 0xF5, 0x00, 0x40, 0x29, 0x00, 0x00, 0x01, 0x01, 0xFE, 0x01,
    0x00, 0x00, 0x65, 0x00, 0x00, 0x01, 0x01, 0x30, 0x2F, 0x00, 0x00,
    0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x01,
    0x04, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x02, 0x59, 0xF4, 0xFB};

uint8_t mode_fan[] = {
    0xF4, 0xF5, 0x00, 0x40, 0x29, 0x00, 0x00, 0x01, 0x01, 0xFE, 0x01,
    0x00, 0x00, 0x65, 0x00, 0x00, 0x07, 0x01, 0x10, 0x33, 0x00, 0x00,
    0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x01,
    0x04, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x02, 0x43, 0xF4, 0xFB};

uint8_t mode_dry[] = {
    0xF4, 0xF5, 0x00, 0x40, 0x29, 0x00, 0x00, 0x01, 0x01, 0xFE, 0x01,
    0x00, 0x00, 0x65, 0x00, 0x00, 0x01, 0x01, 0x70, 0x33, 0x00, 0x00,
    0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x01,
    0x04, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x02, 0x9D, 0xF4, 0xFB};

uint8_t speed_mute[] = {
    0xF4, 0xF5, 0x00, 0x40, 0x29, 0x00, 0x00, 0x01, 0x01, 0xFE, 0x01,
    0x00, 0x00, 0x65, 0x00, 0x00, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x04, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x02, 0x0B, 0xF4, 0xFB};

uint8_t speed_low[] = {
    0xF4, 0xF5, 0x00, 0x40, 0x29, 0x00, 0x00, 0x01, 0x01, 0xFE, 0x01,
    0x00, 0x00, 0x65, 0x00, 0x00, 0x05, 0x01, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x04, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x01, 0xED, 0xF4, 0xFB};

uint8_t speed_med[] = {
    0xF4, 0xF5, 0x00, 0x40, 0x29, 0x00, 0x00, 0x01, 0x01, 0xFE, 0x01,
    0x00, 0x00, 0x65, 0x00, 0x00, 0x07, 0x01, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x04, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x01, 0xEF, 0xF4, 0xFB};

uint8_t speed_max[] = {
    0xF4, 0xF5, 0x00, 0x40, 0x29, 0x00, 0x00, 0x01, 0x01, 0xFE, 0x01,
    0x00, 0x00, 0x65, 0x00, 0x00, 0x09, 0x01, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x04, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x01, 0xF1, 0xF4, 0xFB};

uint8_t speed_auto[] = {
    0xF4, 0xF5, 0x00, 0x40, 0x29, 0x00, 0x00, 0x01, 0x01, 0xFE, 0x01,
    0x00, 0x00, 0x65, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x04, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x01, 0xE9, 0xF4, 0xFB};

uint8_t temp_16_C[] = {
    0xF4, 0xF5, 0x00, 0x40, 0x29, 0x00, 0x00, 0x01, 0x01, 0xFE, 0x01,
    0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0x21, 0x00, 0x00,
    0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x01, 0xF4, 0xF4, 0xF4, 0xFB};

uint8_t temp_17_C[] = {
    0xF4, 0xF5, 0x00, 0x40, 0x29, 0x00, 0x00, 0x01, 0x01, 0xFE, 0x01,
    0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0x23, 0x00, 0x00,
    0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x01, 0xF6, 0xF4, 0xFB};

uint8_t temp_18_C[] = {
    0xF4, 0xF5, 0x00, 0x40, 0x29, 0x00, 0x00, 0x01, 0x01, 0xFE, 0x01,
    0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0x25, 0x00, 0x00,
    0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x01, 0xF8, 0xF4, 0xFB};

uint8_t temp_19_C[] = {
    0xF4, 0xF5, 0x00, 0x40, 0x29, 0x00, 0x00, 0x01, 0x01, 0xFE, 0x01,
    0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0x27, 0x00, 0x00,
    0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x01, 0xFA, 0xF4, 0xFB};

uint8_t temp_20_C[] = {
    0xF4, 0xF5, 0x00, 0x40, 0x29, 0x00, 0x00, 0x01, 0x01, 0xFE, 0x01,
    0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00,
    0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x01, 0xFC, 0xF4, 0xFB};

uint8_t temp_21_C[] = {
    0xF4, 0xF5, 0x00, 0x40, 0x29, 0x00, 0x00, 0x01, 0x01, 0xFE, 0x01,
    0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2B, 0x00, 0x00,
    0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x01, 0xFE, 0xF4, 0xFB};

uint8_t temp_22_C[] = {
    0xF4, 0xF5, 0x00, 0x40, 0x29, 0x00, 0x00, 0x01, 0x01, 0xFE, 0x01,
    0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2D, 0x00, 0x00,
    0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x02, 0x00, 0xF4, 0xFB};

uint8_t temp_23_C[] = {
    0xF4, 0xF5, 0x00, 0x40, 0x29, 0x00, 0x00, 0x01, 0x01, 0xFE, 0x01,
    0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2F, 0x00, 0x00,
    0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x02, 0x02, 0xF4, 0xFB};

uint8_t temp_24_C[] = {
    0xF4, 0xF5, 0x00, 0x40, 0x29, 0x00, 0x00, 0x01, 0x01, 0xFE, 0x01,
    0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0x00, 0x00,
    0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x02, 0x04, 0xF4, 0xFB};

uint8_t temp_25_C[] = {
    0xF4, 0xF5, 0x00, 0x40, 0x29, 0x00, 0x00, 0x01, 0x01, 0xFE, 0x01,
    0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0x33, 0x00, 0x00,
    0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x02, 0x06, 0xF4, 0xFB};

uint8_t temp_26_C[] = {
    0xF4, 0xF5, 0x00, 0x40, 0x29, 0x00, 0x00, 0x01, 0x01, 0xFE, 0x01,
    0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0x35, 0x00, 0x00,
    0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x02, 0x08, 0xF4, 0xFB};

uint8_t temp_27_C[] = {
    0xF4, 0xF5, 0x00, 0x40, 0x29, 0x00, 0x00, 0x01, 0x01, 0xFE, 0x01,
    0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0x37, 0x00, 0x00,
    0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x02, 0x0A, 0xF4, 0xFB};

uint8_t temp_28_C[] = {
    0xF4, 0xF5, 0x00, 0x40, 0x29, 0x00, 0x00, 0x01, 0x01, 0xFE, 0x01,
    0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0x39, 0x00, 0x00,
    0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x02, 0x0C, 0xF4, 0xFB};

uint8_t temp_29_C[] = {
    0xF4, 0xF5, 0x00, 0x40, 0x29, 0x00, 0x00, 0x01, 0x01, 0xFE, 0x01,
    0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3B, 0x00, 0x00,
    0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x02, 0x0E, 0xF4, 0xFB};

uint8_t temp_30_C[] = {
    0xF4, 0xF5, 0x00, 0x40, 0x29, 0x00, 0x00, 0x01, 0x01, 0xFE, 0x01,
    0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3D, 0x00, 0x00,
    0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x02, 0x10, 0xF4, 0xFB};

uint8_t temp_31_C[] = {
    0xF4, 0xF5, 0x00, 0x40, 0x29, 0x00, 0x00, 0x01, 0x01, 0xFE, 0x01,
    0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x00, 0x00,
    0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x02, 0x12, 0xF4, 0xFB};

uint8_t temp_32_C[] = {
    0xF4, 0xF5, 0x00, 0x40, 0x29, 0x00, 0x00, 0x01, 0x01, 0xFE, 0x01,
    0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0x00, 0x00,
    0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x02, 0x14, 0xF4, 0xFB};

uint8_t temp_61_F[] = {
    0xF4, 0xF5, 0x00, 0x40, 0x29, 0x00, 0x00, 0x01, 0x01, 0xFE, 0x01,
    0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7B, 0x00, 0x00,
    0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x02, 0x4E, 0xF4, 0xFB};

uint8_t temp_62_F[] = {
    0xF4, 0xF5, 0x00, 0x40, 0x29, 0x00, 0x00, 0x01, 0x01, 0xFE, 0x01,
    0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7D, 0x00, 0x00,
    0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x02, 0x50, 0xF4, 0xFB};

uint8_t temp_63_F[] = {
    0xF4, 0xF5, 0x00, 0x40, 0x29, 0x00, 0x00, 0x01, 0x01, 0xFE, 0x01,
    0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0x00, 0x00,
    0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x02, 0x52, 0xF4, 0xFB};

uint8_t temp_64_F[] = {
    0xF4, 0xF5, 0x00, 0x40, 0x29, 0x00, 0x00, 0x01, 0x01, 0xFE, 0x01,
    0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0x00, 0x00,
    0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x02, 0x54, 0xF4, 0xFB};

uint8_t temp_65_F[] = {
    0xF4, 0xF5, 0x00, 0x40, 0x29, 0x00, 0x00, 0x01, 0x01, 0xFE, 0x01,
    0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0x83, 0x00, 0x00,
    0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x02, 0x56, 0xF4, 0xFB};

uint8_t temp_66_F[] = {
    0xF4, 0xF5, 0x00, 0x40, 0x29, 0x00, 0x00, 0x01, 0x01, 0xFE, 0x01,
    0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0x00, 0x00,
    0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x02, 0x58, 0xF4, 0xFB};

uint8_t temp_67_F[] = {
    0xF4, 0xF5, 0x00, 0x40, 0x29, 0x00, 0x00, 0x01, 0x01, 0xFE, 0x01,
    0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0x87, 0x00, 0x00,
    0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x02, 0x5A, 0xF4, 0xFB};

uint8_t temp_68_F[] = {
    0xF4, 0xF5, 0x00, 0x40, 0x29, 0x00, 0x00, 0x01, 0x01, 0xFE, 0x01,
    0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0x00, 0x00,
    0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x02, 0x5C, 0xF4, 0xFB};

uint8_t temp_69_F[] = {
    0xF4, 0xF5, 0x00, 0x40, 0x29, 0x00, 0x00, 0x01, 0x01, 0xFE, 0x01,
    0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0x8B, 0x00, 0x00,
    0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x02, 0x5E, 0xF4, 0xFB};

uint8_t temp_70_F[] = {
    0xF4, 0xF5, 0x00, 0x40, 0x29, 0x00, 0x00, 0x01, 0x01, 0xFE, 0x01,
    0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0x8D, 0x00, 0x00,
    0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x02, 0x60, 0xF4, 0xFB};

uint8_t temp_71_F[] = {
    0xF4, 0xF5, 0x00, 0x40, 0x29, 0x00, 0x00, 0x01, 0x01, 0xFE, 0x01,
    0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0x8F, 0x00, 0x00,
    0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x02, 0x62, 0xF4, 0xFB};

uint8_t temp_72_F[] = {
    0xF4, 0xF5, 0x00, 0x40, 0x29, 0x00, 0x00, 0x01, 0x01, 0xFE, 0x01,
    0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0x91, 0x00, 0x00,
    0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x02, 0x64, 0xF4, 0xFB};

uint8_t temp_73_F[] = {
    0xF4, 0xF5, 0x00, 0x40, 0x29, 0x00, 0x00, 0x01, 0x01, 0xFE, 0x01,
    0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0x93, 0x00, 0x00,
    0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x02, 0x66, 0xF4, 0xFB};

uint8_t temp_74_F[] = {
    0xF4, 0xF5, 0x00, 0x40, 0x29, 0x00, 0x00, 0x01, 0x01, 0xFE, 0x01,
    0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0x95, 0x00, 0x00,
    0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x02, 0x68, 0xF4, 0xFB};

uint8_t temp_75_F[] = {
    0xF4, 0xF5, 0x00, 0x40, 0x29, 0x00, 0x00, 0x01, 0x01, 0xFE, 0x01,
    0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0x97, 0x00, 0x00,
    0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x02, 0x6A, 0xF4, 0xFB};

uint8_t temp_76_F[] = {
    0xF4, 0xF5, 0x00, 0x40, 0x29, 0x00, 0x00, 0x01, 0x01, 0xFE, 0x01,
    0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0x99, 0x00, 0x00,
    0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x02, 0x6C, 0xF4, 0xFB};

uint8_t temp_77_F[] = {
    0xF4, 0xF5, 0x00, 0x40, 0x29, 0x00, 0x00, 0x01, 0x01, 0xFE, 0x01,
    0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0x9B, 0x00, 0x00,
    0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x02, 0x6E, 0xF4, 0xFB};

uint8_t temp_78_F[] = {
    0xF4, 0xF5, 0x00, 0x40, 0x29, 0x00, 0x00, 0x01, 0x01, 0xFE, 0x01,
    0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0x9D, 0x00, 0x00,
    0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x02, 0x70, 0xF4, 0xFB};

uint8_t temp_79_F[] = {
    0xF4, 0xF5, 0x00, 0x40, 0x29, 0x00, 0x00, 0x01, 0x01, 0xFE, 0x01,
    0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0x9F, 0x00, 0x00,
    0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x02, 0x72, 0xF4, 0xFB};

uint8_t temp_80_F[] = {
    0xF4, 0xF5, 0x00, 0x40, 0x29, 0x00, 0x00, 0x01, 0x01, 0xFE, 0x01,
    0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0xA1, 0x00, 0x00,
    0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x02, 0x74, 0xF4, 0xFB};

uint8_t temp_81_F[] = {
    0xF4, 0xF5, 0x00, 0x40, 0x29, 0x00, 0x00, 0x01, 0x01, 0xFE, 0x01,
    0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0xA3, 0x00, 0x00,
    0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x02, 0x76, 0xF4, 0xFB};

uint8_t temp_82_F[] = {
    0xF4, 0xF5, 0x00, 0x40, 0x29, 0x00, 0x00, 0x01, 0x01, 0xFE, 0x01,
    0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0xA5, 0x00, 0x00,
    0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x02, 0x78, 0xF4, 0xFB};

uint8_t temp_83_F[] = {
    0xF4, 0xF5, 0x00, 0x40, 0x29, 0x00, 0x00, 0x01, 0x01, 0xFE, 0x01,
    0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0xA7, 0x00, 0x00,
    0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x02, 0x7A, 0xF4, 0xFB};

uint8_t temp_84_F[] = {
    0xF4, 0xF5, 0x00, 0x40, 0x29, 0x00, 0x00, 0x01, 0x01, 0xFE, 0x01,
    0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0xA9, 0x00, 0x00,
    0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x02, 0x7C, 0xF4, 0xFB};

uint8_t temp_85_F[] = {
    0xF4, 0xF5, 0x00, 0x40, 0x29, 0x00, 0x00, 0x01, 0x01, 0xFE, 0x01,
    0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0xAB, 0x00, 0x00,
    0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x02, 0x7E, 0xF4, 0xFB};

uint8_t temp_86_F[] = {
    0xF4, 0xF5, 0x00, 0x40, 0x29, 0x00, 0x00, 0x01, 0x01, 0xFE, 0x01,
    0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0xAD, 0x00, 0x00,
    0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x02, 0x80, 0xF4, 0xFB};

uint8_t temp_87_F[] = {
    0xF4, 0xF5, 0x00, 0x40, 0x29, 0x00, 0x00, 0x01, 0x01, 0xFE, 0x01,
    0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0xAF, 0x00, 0x00,
    0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x02, 0x82, 0xF4, 0xFB};

uint8_t temp_88_F[] = {
    0xF4, 0xF5, 0x00, 0x40, 0x29, 0x00, 0x00, 0x01, 0x01, 0xFE, 0x01,
    0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0xB1, 0x00, 0x00,
    0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x02, 0x84, 0xF4, 0xFB};

uint8_t temp_89_F[] = {
    0xF4, 0xF5, 0x00, 0x40, 0x29, 0x00, 0x00, 0x01, 0x01, 0xFE, 0x01,
    0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0xB3, 0x00, 0x00,
    0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x02, 0x86, 0xF4, 0xFB};

uint8_t temp_90_F[] = {
    0xF4, 0xF5, 0x00, 0x40, 0x29, 0x00, 0x00, 0x01, 0x01, 0xFE, 0x01,
    0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0xB5, 0x00, 0x00,
    0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x02, 0x88, 0xF4, 0xFB};

uint8_t turbo_on[] = {
    0xF4, 0xF5, 0x00, 0x40, 0x29, 0x00, 0x00, 0x01, 0x01, 0xFE, 0x01,
    0x00, 0x00, 0x65, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x5C, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x02, 0x41, 0xF4, 0xFB};

uint8_t turbo_off[] = {
    0xF4, 0xF5, 0x00, 0x40, 0x29, 0x00, 0x00, 0x01, 0x01, 0xFE, 0x01,
    0x00, 0x00, 0x65, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x54, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x02, 0x39, 0xF4, 0xFB};

uint8_t energysave_on[] = {
    0xF4, 0xF5, 0x00, 0x40, 0x29, 0x00, 0x00, 0x01, 0x01, 0xFE, 0x01,
    0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x34, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x02, 0x07, 0xF4, 0xFB};

uint8_t energysave_off[] = {
    0xF4, 0xF5, 0x00, 0x40, 0x29, 0x00, 0x00, 0x01, 0x01, 0xFE, 0x01,
    0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x01, 0xE7, 0xF4, 0xFB};

uint8_t display_on[] = {
    0xF4, 0xF5, 0x00, 0x40, 0x29, 0x00, 0x00, 0x01, 0x01, 0xFE, 0x01,
    0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x02, 0x93, 0xF4, 0xFB};

uint8_t display_off[] = {
    0xF4, 0xF5, 0x00, 0x40, 0x29, 0x00, 0x00, 0x01, 0x01, 0xFE, 0x01,
    0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x02, 0x13, 0xF4, 0xFB};

uint8_t sleep_1[] = {
    0xF4, 0xF5, 0x00, 0x40, 0x29, 0x00, 0x00, 0x01, 0x01, 0xFE, 0x01,
    0x00, 0x00, 0x65, 0x00, 0x00, 0x05, 0x03, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x04, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x01, 0xEF, 0xF4, 0xFB};

uint8_t sleep_2[] = {
    0xF4, 0xF5, 0x00, 0x40, 0x29, 0x00, 0x00, 0x01, 0x01, 0xFE, 0x01,
    0x00, 0x00, 0x65, 0x00, 0x00, 0x05, 0x05, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x04, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x01, 0xF1, 0xF4, 0xFB};

uint8_t sleep_3[] = {
    0xF4, 0xF5, 0x00, 0x40, 0x29, 0x00, 0x00, 0x01, 0x01, 0xFE, 0x01,
    0x00, 0x00, 0x65, 0x00, 0x00, 0x05, 0x07, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x04, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x01, 0xF3, 0xF4, 0xFB};

uint8_t sleep_4[] = {
    0xF4, 0xF5, 0x00, 0x40, 0x29, 0x00, 0x00, 0x01, 0x01, 0xFE, 0x01,
    0x00, 0x00, 0x65, 0x00, 0x00, 0x05, 0x09, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x04, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x01, 0xF5, 0xF4, 0xFB};

uint8_t sleep_off[] = {
    0xF4, 0xF5, 0x00, 0x40, 0x29, 0x00, 0x00, 0x01, 0x01, 0xFE, 0x01,
    0x00, 0x00, 0x65, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x04, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x01, 0xE9, 0xF4, 0xFB};

uint8_t vert_dir[] = {
    0xF4, 0xF5, 0x00, 0x40, 0x29, 0x00, 0x00, 0x01, 0x01, 0xFE, 0x01,
    0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x40,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x02, 0x14, 0xF4, 0xFB};

uint8_t vert_swing[] = {
    0xF4, 0xF5, 0x00, 0x40, 0x29, 0x00, 0x00, 0x01, 0x01, 0xFE, 0x01,
    0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xC0,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x02, 0x94, 0xF4, 0xFB};

uint8_t hor_dir[] = {
    0xF4, 0xF5, 0x00, 0x40, 0x29, 0x00, 0x00, 0x01, 0x01, 0xFE, 0x01,
    0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10,
    0x00, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x01, 0xF7, 0xF4, 0xFB};

uint8_t hor_swing[] = {
    0xF4, 0xF5, 0x00, 0x40, 0x29, 0x00, 0x00, 0x01, 0x01, 0xFE, 0x01,
    0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30,
    0x00, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x02, 0x17, 0xF4, 0xFB};

uint8_t temp_to_F[] = {
    0xF4, 0xF5, 0x00, 0x40, 0x29, 0x00, 0x00, 0x01, 0x01, 0xFE, 0x01,
    0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x01, 0xD6, 0xF4, 0xFB};

uint8_t temp_to_F_reset_temp[] = {
    0xF4, 0xF5, 0x00, 0x40, 0x29, 0x00, 0x00, 0x01, 0x01, 0xFE, 0x01,
    0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7B, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x02, 0x4A, 0xF4, 0xFB};

uint8_t temp_to_C[] = {
    0xF4, 0xF5, 0x00, 0x40, 0x29, 0x00, 0x00, 0x01, 0x01, 0xFE, 0x01,
    0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x01, 0xD4, 0xF4, 0xFB};

uint8_t temp_to_C_reset_temp[] = {
    0xF4, 0xF5, 0x00, 0x40, 0x29, 0x00, 0x00, 0x01, 0x01, 0xFE, 0x01,
    0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0x21, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x01, 0xF0, 0xF4, 0xFB};

static const char *const TAG = "hisense_ac.climate";

class HisenseAC : public PollingComponent, public Climate, public UARTDevice
{
public:
    HisenseAC(UARTComponent *parent) : PollingComponent(2000),
                                       UARTDevice(parent),
                                       compressor_frequency(),
                                       compressor_frequency_setting(),
                                       compressor_frequency_send(),
                                       outdoor_temperature(),
                                       outdoor_condenser_temperature(),
                                       compressor_exhaust_temperature(),
                                       target_exhaust_temperature(),
                                       indoor_pipe_temperature(),
                                       indoor_humidity_setting(),
                                       indoor_humidity_status(),
                                       UART_crc_errors() {}

    void setup() override
    {
        compressor_frequency.set_state_class(sensor::STATE_CLASS_MEASUREMENT);
        compressor_frequency_setting.set_state_class(sensor::STATE_CLASS_MEASUREMENT);
        compressor_frequency_send.set_state_class(sensor::STATE_CLASS_MEASUREMENT);
        outdoor_temperature.set_state_class(sensor::STATE_CLASS_MEASUREMENT);
        outdoor_condenser_temperature.set_state_class(sensor::STATE_CLASS_MEASUREMENT);
        compressor_exhaust_temperature.set_state_class(sensor::STATE_CLASS_MEASUREMENT);
        target_exhaust_temperature.set_state_class(sensor::STATE_CLASS_MEASUREMENT);
        indoor_pipe_temperature.set_state_class(sensor::STATE_CLASS_MEASUREMENT);
        indoor_humidity_setting.set_state_class(sensor::STATE_CLASS_MEASUREMENT);
        indoor_humidity_status.set_state_class(sensor::STATE_CLASS_MEASUREMENT);
        UART_crc_errors.set_state_class(sensor::STATE_CLASS_MEASUREMENT);
    }

    void update() override
    {
        uint8_t req_stat[] = {
            0xF4, 0xF5, 0x00, 0x40,
            0x0C, 0x00, 0x00, 0x01,
            0x01, 0xFE, 0x01, 0x00,
            0x00, 0x66, 0x00, 0x00,
            0x00, 0x01, 0xB3, 0xF4,
            0xFB};

        write_array(req_stat, 21);
        flush();

        if (read_response())
        {

            // ESP_LOGD(
            //     TAG,
            //     "compf: %d compf_set: %d compf_snd: %d\n",
            //     ((Device_Status*)int_buf)compressor_frequency,
            //     ((Device_Status*)int_buf)compressor_frequency_setting,
            //     ((Device_Status*)int_buf)compressor_frequency_send);

            // ESP_LOGD(
            //     TAG,
            //     "out_temp: %d out_cond_temp: %d comp_exh_temp: %d comp_exh_temp_tgt: %d\n",
            //     ((Device_Status*)int_buf)outdoor_temperature,
            //     ((Device_Status*)int_buf)outdoor_condenser_temperature,
            //     ((Device_Status*)int_buf)compressor_exhaust_temperature,
            //     ((Device_Status*)int_buf)target_exhaust_temperature);

            // ESP_LOGD(
            //     TAG,
            //     "indoor_pipe_temp %d\n",
            //     ((Device_Status*)int_buf)indoor_pipe_temperature);

            // ESP_LOGD(
            //     TAG,
            //     "indor_humid_set: %d indoor_humid: %d\n",
            //     ((Device_Status*)int_buf)indoor_humidity_setting,
            //     ((Device_Status*)int_buf)indoor_humidity_status);
/*             ESP_LOGD(TAG, "wind_status - %d", ((Device_Status*)int_buf)->wind_status);
            ESP_LOGD(TAG, "sleep_status - %d", ((Device_Status*)int_buf)->sleep_status);
            ESP_LOGD(TAG, "direction_status - %d", ((Device_Status*)int_buf)->direction_status);
            ESP_LOGD(TAG, "run_status - %d", ((Device_Status*)int_buf)->run_status);
            ESP_LOGD(TAG, "mode_status - %d", ((Device_Status*)int_buf)->mode_status);
            ESP_LOGD(TAG, "indoor_temperature_setting - %d", ((Device_Status*)int_buf)->indoor_temperature_setting);
            ESP_LOGD(TAG, "indoor_temperature_status - %d", ((Device_Status*)int_buf)->indoor_temperature_status);
            ESP_LOGD(TAG, "indoor_pipe_temperature - %d", ((Device_Status*)int_buf)->indoor_pipe_temperature);
            ESP_LOGD(TAG, "indoor_humidity_setting - %d", ((Device_Status*)int_buf)->indoor_humidity_setting);
            ESP_LOGD(TAG, "indoor_humidity_status - %d", ((Device_Status*)int_buf)->indoor_humidity_status);

            ESP_LOGD(TAG, "somatosensory_temperature - %d", ((Device_Status*)int_buf)->somatosensory_temperature);
            ESP_LOGD(TAG, "somatosensory_compensation_ctrl - %d", ((Device_Status*)int_buf)->somatosensory_compensation_ctrl);
            ESP_LOGD(TAG, "somatosensory_compensation - %d", ((Device_Status*)int_buf)->somatosensory_compensation);
            ESP_LOGD(TAG, "temperature_Fahrenheit - %d", ((Device_Status*)int_buf)->temperature_Fahrenheit);
            ESP_LOGD(TAG, "temperature_compensation - %d", ((Device_Status*)int_buf)->temperature_compensation);
            ESP_LOGD(TAG, "timer - %d", ((Device_Status*)int_buf)->timer);

            ESP_LOGD(TAG, "wind_door - %d", ((Device_Status*)int_buf)->wind_door);
            ESP_LOGD(TAG, "drying - %d", ((Device_Status*)int_buf)->drying);
            ESP_LOGD(TAG, "dual_frequency - %d", ((Device_Status*)int_buf)->dual_frequency);
            ESP_LOGD(TAG, "efficient - %d", ((Device_Status*)int_buf)->efficient);
            ESP_LOGD(TAG, "low_electricity - %d", ((Device_Status*)int_buf)->low_electricity);
            ESP_LOGD(TAG, "low_power - %d", ((Device_Status*)int_buf)->low_power);
            ESP_LOGD(TAG, "heat - %d", ((Device_Status*)int_buf)->heat);
            ESP_LOGD(TAG, "nature - %d", ((Device_Status*)int_buf)->nature);
            ESP_LOGD(TAG, "left_right - %d", ((Device_Status*)int_buf)->left_right);
            ESP_LOGD(TAG, "up_down - %d", ((Device_Status*)int_buf)->up_down);
            ESP_LOGD(TAG, "smoke - %d", ((Device_Status*)int_buf)->smoke);

            ESP_LOGD(TAG, "mute - %d", ((Device_Status*)int_buf)->mute);
            ESP_LOGD(TAG, "smart_eye - %d", ((Device_Status*)int_buf)->smart_eye);
            ESP_LOGD(TAG, "outdoor_clear - %d", ((Device_Status*)int_buf)->outdoor_clear);
            ESP_LOGD(TAG, "indoor_clear - %d", ((Device_Status*)int_buf)->indoor_clear);
            ESP_LOGD(TAG, "swap - %d", ((Device_Status*)int_buf)->swap);
            ESP_LOGD(TAG, "dew - %d", ((Device_Status*)int_buf)->dew);

            ESP_LOGD(TAG, "indoor_electric - %d", ((Device_Status*)int_buf)->indoor_electric);
            ESP_LOGD(TAG, "right_wind - %d", ((Device_Status*)int_buf)->right_wind);
            ESP_LOGD(TAG, "left_wind - %d", ((Device_Status*)int_buf)->left_wind);
            ESP_LOGD(TAG, "filter_reset - %d", ((Device_Status*)int_buf)->filter_reset);
            ESP_LOGD(TAG, "indoor_led - %d", ((Device_Status*)int_buf)->indoor_led);
            ESP_LOGD(TAG, "indicate_led - %d", ((Device_Status*)int_buf)->indicate_led);
            ESP_LOGD(TAG, "display_led - %d", ((Device_Status*)int_buf)->display_led);
            ESP_LOGD(TAG, "back_led - %d\n", ((Device_Status*)int_buf)->back_led);

            ESP_LOGD(TAG, "indoor_outdoor_communication - %d", ((Device_Status*)int_buf)->indoor_outdoor_communication);
            ESP_LOGD(TAG, "indoor_zero_voltage - %d", ((Device_Status*)int_buf)->indoor_zero_voltage);
            ESP_LOGD(TAG, "indoor_bars - %d", ((Device_Status*)int_buf)->indoor_bars);
            ESP_LOGD(TAG, "indoor_machine_run - %d", ((Device_Status*)int_buf)->indoor_machine_run);
            ESP_LOGD(TAG, "indoor_water_pump - %d", ((Device_Status*)int_buf)->indoor_water_pump);
            ESP_LOGD(TAG, "indoor_humidity_sensor - %d", ((Device_Status*)int_buf)->indoor_humidity_sensor);
            ESP_LOGD(TAG, "indoor_temperature_pipe_sensor - %d", ((Device_Status*)int_buf)->indoor_temperature_pipe_sensor);
            ESP_LOGD(TAG, "indoor_temperature_sensor - %d\n", ((Device_Status*)int_buf)->indoor_temperature_sensor);

            ESP_LOGD(TAG, "compressor_frequency - %d", ((Device_Status*)int_buf)->compressor_frequency);
            ESP_LOGD(TAG, "compressor_frequency_setting - %d", ((Device_Status*)int_buf)->compressor_frequency_setting);
            ESP_LOGD(TAG, "compressor_frequency_send - %d", ((Device_Status*)int_buf)->compressor_frequency_send);
            ESP_LOGD(TAG, "outdoor_temperature - %d", ((Device_Status*)int_buf)->outdoor_temperature);
            ESP_LOGD(TAG, "outdoor_condenser_temperature - %d", ((Device_Status*)int_buf)->outdoor_condenser_temperature);
            ESP_LOGD(TAG, "compressor_exhaust_temperature - %d", ((Device_Status*)int_buf)->compressor_exhaust_temperature);
            ESP_LOGD(TAG, "target_exhaust_temperature - %d", ((Device_Status*)int_buf)->target_exhaust_temperature);
            ESP_LOGD(TAG, "expand_threshold - %d\n", ((Device_Status*)int_buf)->expand_threshold);

            ESP_LOGD(TAG, "generatrix_voltage_high - %d", ((Device_Status*)int_buf)->generatrix_voltage_high);
            ESP_LOGD(TAG, "generatrix_voltage_low - %d", ((Device_Status*)int_buf)->generatrix_voltage_low);
            ESP_LOGD(TAG, "IUV - %d\n", ((Device_Status*)int_buf)->IUV); */

            target_temperature = ((Device_Status*)int_buf)->indoor_temperature_setting;
            current_temperature = ((Device_Status*)int_buf)->indoor_temperature_status;

            // See if the system is actively running
            bool comp_running = false;
            if (((Device_Status*)int_buf)->compressor_frequency > 0)
            {
                comp_running = true;
            }

            if (((Device_Status*)int_buf)->left_right && ((Device_Status*)int_buf)->up_down)
                swing_mode = climate::CLIMATE_SWING_BOTH;
            else if (((Device_Status*)int_buf)->left_right)
                swing_mode = climate::CLIMATE_SWING_HORIZONTAL;
            else if (((Device_Status*)int_buf)->up_down)
                swing_mode = climate::CLIMATE_SWING_VERTICAL;
            else
                swing_mode = climate::CLIMATE_SWING_OFF;

            if (((Device_Status*)int_buf)->run_status == 0)
            {
                mode = CLIMATE_MODE_OFF;
                action = CLIMATE_ACTION_OFF;
            }
            else if (((Device_Status*)int_buf)->mode_status == 0)
            {
                mode = CLIMATE_MODE_FAN_ONLY;
                action = CLIMATE_ACTION_FAN;
            }
            else if (((Device_Status*)int_buf)->mode_status == 1)
            {
                mode = climate::CLIMATE_MODE_HEAT;
                if (comp_running)
                {
                    action = CLIMATE_ACTION_HEATING;
                }
                else
                {
                    action = CLIMATE_ACTION_IDLE;
                }
            }
            else if (((Device_Status*)int_buf)->mode_status == 2)
            {
                mode = climate::CLIMATE_MODE_COOL;
                if (comp_running)
                {
                    action = CLIMATE_ACTION_COOLING;
                }
                else
                {
                    action = CLIMATE_ACTION_IDLE;
                }
            }
            else if (((Device_Status*)int_buf)->mode_status == 3)
            {
                mode = climate::CLIMATE_MODE_DRY;
                if (comp_running)
                {
                    action = CLIMATE_ACTION_DRYING;
                }
                else
                {
                    action = CLIMATE_ACTION_IDLE;
                }
            }

            if (((Device_Status*)int_buf)->wind_status == 18 || ((Device_Status*)int_buf)->wind_status == 16)
            {
                fan_mode = climate::CLIMATE_FAN_HIGH;
            }
/* 			else if (((Device_Status*)int_buf)->wind_status == 16)
            {
                fan_mode = climate::CLIMATE_FAN_HIGH;
            } */
            else if (((Device_Status*)int_buf)->wind_status == 14 || ((Device_Status*)int_buf)->wind_status == 12)
            {
                fan_mode = climate::CLIMATE_FAN_MEDIUM;
            }
/* 			else if (((Device_Status*)int_buf)->wind_status == 12)
            {
                fan_mode = climate::CLIMATE_FAN_LOW;
            } */
            else if (((Device_Status*)int_buf)->wind_status == 10)
            {
                fan_mode = climate::CLIMATE_FAN_LOW;
            }
            else if (((Device_Status*)int_buf)->wind_status == 2)
            {
                fan_mode = climate::CLIMATE_FAN_QUIET;
            }
            else if (((Device_Status*)int_buf)->wind_status == 1)
            {
                fan_mode = climate::CLIMATE_FAN_AUTO;
            }

            this->publish_state();

            // Update sensors
            set_sensor(compressor_frequency, ((Device_Status*)int_buf)->compressor_frequency);
            set_sensor(compressor_frequency_setting, ((Device_Status*)int_buf)->compressor_frequency_setting);
            set_sensor(compressor_frequency_send, ((Device_Status*)int_buf)->compressor_frequency_send);
            set_sensor(outdoor_temperature, ((Device_Status*)int_buf)->outdoor_temperature);
            set_sensor(outdoor_condenser_temperature, ((Device_Status*)int_buf)->outdoor_condenser_temperature);
            set_sensor(compressor_exhaust_temperature, ((Device_Status*)int_buf)->compressor_exhaust_temperature);
            set_sensor(target_exhaust_temperature, ((Device_Status*)int_buf)->target_exhaust_temperature);
            set_sensor(indoor_pipe_temperature, ((Device_Status*)int_buf)->indoor_pipe_temperature);
            set_sensor(indoor_humidity_setting, ((Device_Status*)int_buf)->indoor_humidity_setting);
            set_sensor(indoor_humidity_status, ((Device_Status*)int_buf)->indoor_humidity_status);
            set_sensor(UART_crc_errors, get_uart_crc_errors());

            // Save target temperature since it gets messed up by the mode switch command
            if (this->mode == CLIMATE_MODE_COOL && target_temperature > 0)
            {
                cool_tgt_temp = target_temperature;
            }
            else if (this->mode == CLIMATE_MODE_HEAT && target_temperature > 0)
            {
                heat_tgt_temp = target_temperature;
            }
        }
    }

    void control(const ClimateCall &call) override
    {
        const uint8_t resp_size = 83;
        uint8_t response_buf[resp_size];
        if (call.get_mode().has_value())
        {
            // Save target temperature since it gets messed up by the mode switch command
            if (this->mode == CLIMATE_MODE_COOL && target_temperature > 0)
            {
                cool_tgt_temp = target_temperature;
            }
            else if (this->mode == CLIMATE_MODE_HEAT && target_temperature > 0)
            {
                heat_tgt_temp = target_temperature;
            }

            // User requested mode change
            ClimateMode md = *call.get_mode();

            if (md != climate::CLIMATE_MODE_OFF && this->mode == climate::CLIMATE_MODE_OFF)
            {
                send_command(on, sizeof(on));
            }

            switch (md)
            {
            case climate::CLIMATE_MODE_OFF:
                send_command(off, sizeof(off));
                break;
            case climate::CLIMATE_MODE_COOL:
                send_command(mode_cool, sizeof(mode_cool));
                set_temp(cool_tgt_temp);
                break;
            case climate::CLIMATE_MODE_HEAT:
                send_command(mode_heat, sizeof(mode_heat));
                set_temp(heat_tgt_temp);
                break;
            case climate::CLIMATE_MODE_FAN_ONLY:
                send_command(mode_fan, sizeof(mode_fan));
                break;
            case climate::CLIMATE_MODE_DRY:
                send_command(mode_dry, sizeof(mode_dry));
                break;
            default:
                break;
            }

            // Publish updated state
            this->mode = md;
            this->publish_state();
        }

        if (call.get_target_temperature().has_value())
        {
            // User requested target temperature change
            float temp = *call.get_target_temperature();

            set_temp(temp);

            // Send target temp to climate
            target_temperature = temp;
            this->publish_state();
        }

        if (call.get_fan_mode().has_value())
        {
            ClimateFanMode fm = *call.get_fan_mode();
            switch (fm)
            {
            case climate::CLIMATE_FAN_AUTO:
                send_command(speed_auto, sizeof(speed_auto));
                break;
            case climate::CLIMATE_FAN_LOW:
                send_command(speed_low, sizeof(speed_low));
                break;
            case climate::CLIMATE_FAN_MEDIUM:
                send_command(speed_med, sizeof(speed_med));
                break;
            case climate::CLIMATE_FAN_HIGH:
                send_command(speed_max, sizeof(speed_max));
                break;
            case climate::CLIMATE_FAN_QUIET:
                send_command(speed_mute, sizeof(speed_mute));
                break;
            default:
                break;
            }
            fan_mode = fm;
            this->publish_state();
        }

        if (call.get_swing_mode().has_value())
        {
            uint32_t start_time = millis();
            ClimateSwingMode sm = *call.get_swing_mode();

            if (sm == climate::CLIMATE_SWING_OFF)
            {
                if (climate::CLIMATE_SWING_BOTH == swing_mode)
                {
                    send_command(vert_dir, sizeof(vert_dir));
                    while (millis() - start_time < 500)
                        ;
                    send_command(hor_dir, sizeof(hor_dir));
                }
                else if (climate::CLIMATE_SWING_VERTICAL == swing_mode)
                {
                    send_command(vert_dir, sizeof(vert_dir));
                }
                else if (climate::CLIMATE_SWING_HORIZONTAL == swing_mode)
                {
                    send_command(hor_dir, sizeof(hor_dir));
                }
            }
            else if (sm == climate::CLIMATE_SWING_BOTH)
            {
                if (climate::CLIMATE_SWING_OFF == swing_mode)
                {
                    send_command(vert_swing, sizeof(vert_swing));
                    while (millis() - start_time < 500)
                        ;
                    send_command(hor_swing, sizeof(hor_swing));
                }
                else if (climate::CLIMATE_SWING_VERTICAL == swing_mode)
                {
                    send_command(hor_swing, sizeof(hor_swing));
                }
                else if (climate::CLIMATE_SWING_HORIZONTAL == swing_mode)
                {
                    send_command(vert_swing, sizeof(vert_swing));
                }
            }
            else if (sm == climate::CLIMATE_SWING_VERTICAL)
            {
                if (climate::CLIMATE_SWING_OFF == swing_mode)
                {
                    send_command(vert_swing, sizeof(vert_swing));
                }
                else if (climate::CLIMATE_SWING_BOTH == swing_mode)
                {
                    send_command(hor_dir, sizeof(hor_dir));
                }
                else if (climate::CLIMATE_SWING_HORIZONTAL == swing_mode)
                {
                    send_command(hor_dir, sizeof(hor_dir));
                    while (millis() - start_time < 500)
                        ;
                    send_command(vert_swing, sizeof(vert_swing));
                }
            }
            else if (sm == climate::CLIMATE_SWING_HORIZONTAL)
            {
                if (climate::CLIMATE_SWING_OFF == swing_mode)
                {
                    send_command(hor_swing, sizeof(hor_swing));
                }
                else if (climate::CLIMATE_SWING_BOTH == swing_mode)
                {
                    send_command(vert_dir, sizeof(vert_dir));
                }
                else if (climate::CLIMATE_SWING_VERTICAL == swing_mode)
                {
                    send_command(vert_dir, sizeof(vert_dir));
                    while (millis() - start_time < 500)
                        ;
                    send_command(hor_swing, sizeof(hor_swing));
                }
            }

            swing_mode = sm;
            this->publish_state();
        }

        if (call.get_preset().has_value())
        {
            ClimatePreset pre = *call.get_preset();
            switch (pre)
            {
            case climate::CLIMATE_PRESET_NONE:
                send_command(turbo_off, sizeof(turbo_off));
                send_command(energysave_off, sizeof(energysave_off));
                break;
            case climate::CLIMATE_PRESET_BOOST:
                send_command(turbo_on, sizeof(turbo_on));
                break;
            case climate::CLIMATE_PRESET_ECO:
                send_command(energysave_on, sizeof(energysave_on));
                break;
            default:
                break;
            }

            preset = pre;
            this->publish_state();
        }
    }

    ClimateTraits traits() override
    {
        // The capabilities of the climate device
        auto traits = climate::ClimateTraits();
        traits.set_supports_current_temperature(true);
        traits.set_visual_min_temperature(16);
        traits.set_visual_max_temperature(30);
        traits.set_visual_temperature_step(1);
        traits.set_supported_modes({
            climate::CLIMATE_MODE_OFF,
            climate::CLIMATE_MODE_COOL,
            climate::CLIMATE_MODE_HEAT,
            climate::CLIMATE_MODE_FAN_ONLY,
            climate::CLIMATE_MODE_DRY,
        });
        traits.set_supported_swing_modes({climate::CLIMATE_SWING_OFF,
                                          climate::CLIMATE_SWING_BOTH,
                                          climate::CLIMATE_SWING_VERTICAL,
                                          climate::CLIMATE_SWING_HORIZONTAL});
        traits.set_supported_fan_modes({
            climate::CLIMATE_FAN_AUTO,
            climate::CLIMATE_FAN_LOW,
            climate::CLIMATE_FAN_MEDIUM,
            climate::CLIMATE_FAN_HIGH,
            climate::CLIMATE_FAN_QUIET,
        });
        traits.set_supported_presets({climate::CLIMATE_PRESET_NONE,
                                      climate::CLIMATE_PRESET_BOOST,
                                      climate::CLIMATE_PRESET_ECO});
        traits.set_supports_action(true);
        return traits;
    }

    sensor::Sensor compressor_frequency;
    sensor::Sensor compressor_frequency_setting;
    sensor::Sensor compressor_frequency_send;
    sensor::Sensor outdoor_temperature;
    sensor::Sensor outdoor_condenser_temperature;
    sensor::Sensor compressor_exhaust_temperature;
    sensor::Sensor target_exhaust_temperature;
    sensor::Sensor indoor_pipe_temperature;
    sensor::Sensor indoor_humidity_setting;
    sensor::Sensor indoor_humidity_status;
    sensor::Sensor UART_crc_errors;

private:
    float heat_tgt_temp = 16;
    float cool_tgt_temp = 26;

    bool read_response()
    {
        int size = 0;
        uint32_t start_time = millis();
        while (millis() - start_time < 250)
            ;

        size = available();
        bool read_success = read_array(int_buf, size);

        // Exit if we timed out
        if (!read_success)
        {
            return false;
        }

        ESP_LOGD(
            TAG,
            "Received %d bytes.",
            size);

        uint16_t checksum = 0;
        for (int i = 2; i < size - 4; i++)
        {
            checksum += int_buf[i];
        }
        uint16_t rxd_checksum = int_buf[size - 4];
        rxd_checksum = rxd_checksum << 8;
        rxd_checksum |= int_buf[size - 3];
        if (rxd_checksum != checksum)
        {
            ESP_LOGD(
                TAG,
                "CRC check failed. Computed: %d Received: %d Bytes Not Read: %d\n",
                checksum,
                rxd_checksum,
                available());
            read_success = false;
            ++uart_crc_errors;
        }

        return read_success;
    }

    void send_command(uint8_t cmd[], size_t sz)
    {
        uint32_t start_time = millis();
        write_array(cmd, sz);
        flush();
        read_response();
    }

    void set_sensor(Sensor &sensor, float value)
    {
        if (!sensor.has_state() || sensor.get_raw_state() != value)
            sensor.publish_state(value);
    }
    uint8_t get_uart_crc_errors()
    {
        return uart_crc_errors;
    }

    void set_temp(float temp)
    {
        //uint8_t temp_f = roundf(temp * 1.8 + 32);
		uint8_t temp_c = roundf(temp);
        switch (temp_c)
        {
        case 16:
            send_command(temp_16_C, sizeof(temp_16_C));
            break;
        case 17:
            send_command(temp_17_C, sizeof(temp_17_C));
            break;
        case 18:
            send_command(temp_18_C, sizeof(temp_18_C));
            break;
        case 19:
            send_command(temp_19_C, sizeof(temp_19_C));
            break;
        case 20:
            send_command(temp_20_C, sizeof(temp_20_C));
            break;
        case 21:
            send_command(temp_21_C, sizeof(temp_21_C));
            break;
        case 22:
            send_command(temp_22_C, sizeof(temp_22_C));
            break;
        case 23:
            send_command(temp_23_C, sizeof(temp_23_C));
            break;
        case 24:
            send_command(temp_24_C, sizeof(temp_24_C));
            break;
        case 25:
            send_command(temp_25_C, sizeof(temp_25_C));
            break;
        case 26:
            send_command(temp_26_C, sizeof(temp_26_C));
            break;
        case 27:
            send_command(temp_27_C, sizeof(temp_27_C));
            break;
        case 28:
            send_command(temp_28_C, sizeof(temp_28_C));
            break;
        case 29:
            send_command(temp_29_C, sizeof(temp_29_C));
            break;
        case 30:
            send_command(temp_30_C, sizeof(temp_30_C));
            break;
        case 31:
            send_command(temp_31_C, sizeof(temp_31_C));
            break;
        case 32:
            send_command(temp_32_C, sizeof(temp_32_C));
            break;
        default:
            break;
        }
    }

    uint8_t int_buf[256];
    // Device_Status dev_stat;
    uint8_t uart_crc_errors = 0;
};
